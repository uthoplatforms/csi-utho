####################
### Storage Classes
####################
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: csi.utho.com
spec:
  attachRequired: true
  podInfoOnMount: true

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: utho-block-storage
  namespace: kube-system
provisioner: csi.utho.com
allowVolumeExpansion: true
parameters:
  iops: "3000"
  throughput: "125"

###################
### CSI Controller
###################
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-utho-controller
  namespace: kube-system
spec:
  serviceName: "csi-utho"
  replicas: 1
  selector:
    matchLabels:
      app: csi-utho-controller
  template:
    metadata:
      labels:
        app: csi-utho-controller
        role: csi-utho
    spec:
      serviceAccountName: csi-utho-controller-sa
      containers:
        - name: csi-provisioner
          image: k8s.gcr.io/sig-storage/csi-provisioner:v3.4.0
          args:
            - "--volume-name-prefix=pvc"
            - "--volume-name-uuid-length=16"
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--default-fstype=ext4"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: k8s.gcr.io/sig-storage/csi-attacher:v4.6.1
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-utho-plugin
          image: utho/csi-utho:0.1.16
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--token=$(UTHO_API_KEY)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: UTHO_API_KEY
              valueFrom:
                secretKeyRef:
                  name: csi-utho
                  key: api-key
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-utho-controller-sa
  namespace: kube-system

## Attacher Role + Binding
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-utho-attacher-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-controller-attacher-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-utho-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-utho-attacher-role
  apiGroup: rbac.authorization.k8s.io

## Provisioner Role + Binding
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-utho-provisioner-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-controller-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: csi-utho-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-utho-provisioner-role
  apiGroup: rbac.authorization.k8s.io

############
## CSI Node
############
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-utho-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-utho-node
  template:
    metadata:
      labels:
        app: csi-utho-node
        role: csi-utho
    spec:
      nodeSelector:
        daemonset-eligible: "true"
      priorityClassName: system-node-critical
      serviceAccount: csi-utho-node-sa
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.10.1
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/k0s/kubelet/plugins/csi.utho.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/

        # CSI Plugin Container
        - name: csi-utho-plugin
          image: utho/csi-utho:0.1.16
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--token=$(UTHO_API_KEY)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: UTHO_API_KEY
              valueFrom:
                secretKeyRef:
                  name: csi-utho
                  key: api-key
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/k0s/kubelet
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/k0s/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: kubelet-dir
          hostPath:
            path: /var/lib/k0s/kubelet
            type: Directory
        - name: plugin-dir
          hostPath:
            path: /var/lib/k0s/kubelet/plugins/csi.utho.com/
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/k0s/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: udev-rules-etc
          hostPath:
            path: /etc/udev
            type: Directory
        - name: udev-rules-lib
          hostPath:
            path: /lib/udev
            type: Directory
        - name: udev-socket
          hostPath:
            path: /run/udev
            type: Directory
        - name: sys
          hostPath:
            path: /sys
            type: Directory

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-utho-node-sa
  namespace: kube-system

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: csi-utho-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-utho-node-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-utho-node-driver-registrar-role
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-utho-resizer-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-utho-resizer-binding
subjects:
  - kind: ServiceAccount
    name: csi-utho-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-utho-resizer-role
  apiGroup: rbac.authorization.k8s.io
